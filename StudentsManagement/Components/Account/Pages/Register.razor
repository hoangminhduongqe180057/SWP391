@page "/Account/Register"
@layout RegisterLayout
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using StudentsManagement.Client.Services
@using StudentsManagement.Data
@using StudentsManagement.Services
@using StudentsManagement.Shared.Models
@using Microsoft.EntityFrameworkCore
@using StudentsManagement.Components.Layout

@inject NavigationManager navigation;

@inject IConfiguration config
@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject SystemCodeDetailService SystemCodeDetailService
@inject ApplicationDbContext _context
<!--  UserManager<ApplicationUser> _userManager -->
@inject RoleManager<ApplicationRole> roleManager
@inject SystemCodeDetailRepository systemCodeDetailRepository

<section class="h-100 bg-dark">
    <div class="container py-5 h-100">
        <div class="row d-flex justify-content-center align-items-center h-100">
            <div class="col">
                <div class="card card-registration my-4">
                    <div class="row g-0">
                        <div class="col-xl-6 d-none d-xl-block">
                            <img src="https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-registration/img4.webp"
                                 alt="Sample photo" class="img-fluid"
                                 style="border-top-left-radius: .25rem; border-bottom-left-radius: .25rem;" />
                        </div>
                        <div class="col-xl-6">
                            <div class="card-body p-md-5 text-black">
                                <h3 class="mb-5 text-uppercase text-dark">Administrator registration form</h3>

                                @if (!string.IsNullOrEmpty(Message))
                                {
                                    <StatusMessage Message="@Message" />
                                }

                                <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
                                    <DataAnnotationsValidator />
                                    <ValidationSummary class="text-danger" role="alert" />

                                    <div class="row">
                                        <div class="col-md-4 mb-4">
                                            <div class="form-outline">
                                                <label class="form-label" for="form3Example1m">First Name</label>
                                                <InputText @bind-Value="Input.FirstName" id="form3Example1m" class="form-control form-control-lg" />
                                                <ValidationMessage For="() => Input.FirstName" class="text-danger" />
                                            </div>
                                        </div>
                                        <div class="col-md-4 mb-4">
                                            <div class="form-outline">
                                                <label class="form-label" for="form3Example1n">Middle Name</label>
                                                <InputText @bind-Value="Input.MiddleName" id="form3Example1n" class="form-control form-control-lg" />
                                                <ValidationMessage For="() => Input.MiddleName" class="text-danger" />
                                            </div>
                                        </div>
                                        <div class="col-md-4 mb-4">
                                            <div class="form-outline">
                                                <label class="form-label" for="form3Example1n">Last Name</label>
                                                <InputText @bind-Value="Input.LastName" id="form3Example1n" class="form-control form-control-lg" />
                                                <ValidationMessage For="() => Input.LastName" class="text-danger" />
                                            </div>
                                        </div>
                                    </div>

                                    <div class="form-outline mb-4">
                                        <label class="form-label" for="form3Example8">Phone Number</label>
                                        <InputText @bind-Value="Input.PhoneNumber" id="form3Example8" class="form-control form-control-lg" />
                                        <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
                                    </div>

                                    <div class="row">
                                        <div class="col-md-6 mb-4">
                                            <label class="form-label">Role</label>
                                            <InputSelect for="RoleId" @bind-Value="Input.RoleId" class="form-select form-control-lg">
                                                <option value="">Select Role</option>
                                                @if (Roles != null && Roles.Any())
                                                {
                                                    @foreach (var role in Roles)
                                                    {
                                                        <option value="@role.Id">@role.Code</option>
                                                    }
                                                }
                                            </InputSelect>
                                            <ValidationMessage For="() => Input.RoleId" class="text-danger" />
                                        </div>

                                        <div class="col-md-6 mb-4">
                                            <label class="form-label">Gender</label>
                                            <InputSelect for="GenderId" @bind-Value="Input.GenderId" class="form-select form-control-lg">
                                                <option value="">Select Gender</option>
                                                @if (Gender != null && Gender.Any())
                                                {
                                                    @foreach (var gender in Gender)
                                                    {
                                                        <option value="@gender.Id">@gender.Description</option>
                                                    }
                                                }
                                            </InputSelect>
                                            <ValidationMessage For="() => Input.GenderId" class="text-danger" />
                                        </div>
                                    </div>

                                    <div class="form-outline mb-4">
                                        <label class="form-label" for="Photo">Photo</label>
                                        <InputFile OnChange="@LoadUpLoadFile" accept=".jpg,.png,.jpeg" class="form-control form-control-lg" />
                                        <ValidationMessage For="() => Input.Photo" class="text-danger" />
                                    </div>

                                    <div class="form-outline mb-4">
                                        <label class="form-label" for="form3Example90">Email</label>
                                        <InputText type="Email" @bind-Value="Input.Email" id="form3Example90" class="form-control form-control-lg" />
                                        <ValidationMessage For="() => Input.Email" class="text-danger" />
                                    </div>

                                    <div class="form-outline mb-4">
                                        <label class="form-label" for="form3Example99">Password</label>
                                        <InputText type="password" @bind-Value="Input.Password" id="form3Example99" class="form-control form-control-lg" />
                                        <ValidationMessage For="() => Input.Password" class="text-danger" />
                                    </div>

                                    <div class="form-outline mb-4">
                                        <label class="form-label" for="form3Example97">Confirm Password</label>
                                        <InputText type="password" @bind-Value="Input.ConfirmPassword" id="form3Example97" class="form-control form-control-lg" />
                                        <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                                    </div>

                                    <div class="d-flex justify-content-end pt-3">
                                        <button type="button" class="btn btn-light btn-lg">Reset All</button>
                                        <button type="submit" class="btn btn-warning btn-lg ms-2">Submit Form</button>
                                    </div>
                                </EditForm>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>


@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        // Set basic user properties
        user.UserName = Input.Email;
        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

        user.FirstName = Input.FirstName;
        user.MiddleName = Input.MiddleName;
        user.LastName = Input.LastName;
        user.Photo = await UpLoadFile();
        user.GenderId = Input.GenderId;
        user.PhoneNumber = Input.PhoneNumber;
        user.LastActivityDate = DateTime.Now;
        user.IsActive = true;

        Logger.LogInformation($"Registering user with email {user.Email}");

        // Create user
        var createUserResult = await UserManager.CreateAsync(user, Input.Password);

        if (!createUserResult.Succeeded)
        {
            Logger.LogError($"Failed to create user {user.Email}: {string.Join(", ", createUserResult.Errors.Select(e => e.Description))}");
            identityErrors = createUserResult.Errors;
            return;
        }

        Logger.LogInformation($"User {user.Email} created successfully.");

        // Lấy SystemCodeDetail dựa trên RoleId
        var systemCodeDetail = await _context.SystemCodeDetails
                                             .Where(s => s.Code == Input.RoleId || s.Id.ToString() == Input.RoleId)
                                             .FirstOrDefaultAsync();

        if (systemCodeDetail != null)
        {
            Logger.LogInformation($"Found SystemCodeDetail with Id: {systemCodeDetail.Id} and Code: {systemCodeDetail.Code}");

            try
            {
                // Đảm bảo rằng vai trò tồn tại trong hệ thống
                await systemCodeDetailRepository.EnsureRoleExistsFromSystemCode(roleManager, systemCodeDetail.Id);

                // Tìm vai trò trong bảng AspNetRoles
                var applicationRole = await roleManager.FindByNameAsync(systemCodeDetail.Code);

                if (applicationRole != null)
                {
                    Logger.LogInformation($"Role found: {applicationRole.Name}");
                    // Gán vai trò cho người dùng
                    var roleAssignResult = await UserManager.AddToRoleAsync(user, applicationRole.Name);
                    if (!roleAssignResult.Succeeded)
                    {
                        Logger.LogError($"Failed to assign role {applicationRole.Name} to user {user.Email}: {string.Join(", ", roleAssignResult.Errors.Select(e => e.Description))}");
                        identityErrors = roleAssignResult.Errors;
                        return;
                    }

                    Logger.LogInformation($"User {user.Email} assigned to role {applicationRole.Name} successfully.");
                }
                else
                {
                    Logger.LogWarning($"Role with Code {systemCodeDetail.Code} not found after ensuring it exists.");
                }
            }
            catch (Exception ex)
            {
                Logger.LogError($"An error occurred while ensuring role exists and assigning it: {ex.Message}");
                throw; // Re-throw the exception if you want to propagate it further.
            }
        }
        else
        {
            Logger.LogWarning($"SystemCodeDetail with Code or Id {Input.RoleId} not found.");
        }

        // Continue with email confirmation
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = user.Id, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo("Account/RegisterConfirmation", new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    public IBrowserFile? file;
    private async Task LoadUpLoadFile(InputFileChangeEventArgs erg)
    {
        file = erg.File;
    }

    private async Task<string> UpLoadFile()
    {
        if (file is null)
        {
            return string.Empty;
        }
        else
        {
            string filename = Path.ChangeExtension(Path.GetRandomFileName(), Path.GetExtension(file.Name));
            string path = Path.Combine(config.GetValue<String>("FileUploads")!, "user", filename);

            string relativepath = Path.Combine("user", filename);

            Directory.CreateDirectory(Path.Combine(config.GetValue<string>("FileUploads")!, "user"));

            await using FileStream filestream = new(path, FileMode.Create);
            await file.OpenReadStream().CopyToAsync(filestream);
            return relativepath;
        }

    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [Display(Name = "First Name")]
        public string FirstName { get; set; } = "";

        [Required]
        [Display(Name = "Middle Name")]
        public string MiddleName { get; set; } = "";

        [Required]
        [Display(Name = "Last Name")]
        public string LastName { get; set; } = "";

        [Display(Name = "Photo")]
        public string? Photo { get; set; } = "";

        [Required]
        [Display(Name = "Gender")]
        public int GenderId { get; set; } = 0;

        public string FullName => $"{FirstName} {MiddleName} {LastName}";

        public bool IsActive { get; set; } = true;

        public DateTime LastActivityDate { get; set; } = DateTime.Now;

        public DateTime? DeactivatedOn { get; set; }

        public string? RoleId { get; set; }

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
        [Required]
        [Phone]
        [Display(Name = "Phone Number")]
        public string PhoneNumber { get; set; } = "";
    }

    List<SystemCodeDetail> Gender = new List<SystemCodeDetail>();
    List<SystemCodeDetail> Roles = new List<SystemCodeDetail>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Gender = await SystemCodeDetailService.GetByCodeAsync("Gender");
            Roles = await SystemCodeDetailService.GetByCodeAsync("UserRoles");

            if (Gender == null || !Gender.Any())
            {
                Logger.LogWarning("Gender list is empty or null");
                Console.WriteLine("Gender list is empty or null");
            }
            else
            {
                Console.WriteLine($"Fetched {Gender.Count} items.");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"Error fetching gender data: {ex.Message}");
            Console.WriteLine($"Error fetching gender data: {ex.Message}");
        }
    }

}

